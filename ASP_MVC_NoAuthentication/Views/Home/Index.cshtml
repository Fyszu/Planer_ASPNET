@using Microsoft.AspNetCore.Identity
@using ASP_MVC_NoAuthentication.Data
@using Microsoft.Extensions.Configuration
@using System.Net
@using System.Text;
@using System.Web;

@{
	ViewData["Title"] = "Planer ładowania";
}
@model List<Car>
@inject IConfiguration Configuration
@{
	string geoKey = Configuration.GetValue<string>("MyApiKey");
	string key = Configuration.GetValue<string>("AuthKey");
	List<ChargingStation> chargingStationsList = new List<ChargingStation>();
	using (WebClient wc = new WebClient())
	{
		wc.Headers[HttpRequestHeader.ContentType] = "application/json";
		wc.Encoding = Encoding.UTF8;
		wc.Headers.Add("User-Agent: Other");
		string result = wc.DownloadString("https://localhost:7288/chargingstation/getAllChargingStations");
		chargingStationsList = Newtonsoft.Json.JsonConvert.DeserializeObject<List<ChargingStation>>(result);
	}
}

<link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.1.3/css/bootstrap.min.css" integrity="sha384-MCw98/SFnGE8fJT3GXwEOngsV7Zt27NXFoaoApmYm81iuXoPkFOJwJ8ERdknLPMO" crossorigin="anonymous">

<head>
	<img src="/images/top_image_wide.jpg" class="img-fluid" alt="Responsive image" style="position:relative; width:100%">
</head>

<body>

<p style="margin-top:60px; margin-left:25px; margin-bottom: 0px; font-family:'Avenir Next LT Pro'; font-size:13pt;">Wpisz poniżej początek i cel swojej podróży, aby automatycznie znaleźć po drodze optymalne miejsce naładowania swojego samochodu elektrycznego.<br><br></p>

<div class="accordion" id="accordionExample" style="margin-top:0px; margin-bottom:25px;">
  <div class="card">
	<div class="card-header" id="headingOne">
	  <h5 class="mb-0">
		<button class="btn btn-link" type="button" data-toggle="collapse" data-target="#collapseOne" aria-expanded="false" aria-controls="collapseOne">
		  Kliknij aby wyświetlić więcej informacji... @chargingStationsList[0].Name @chargingStationsList[1].Name
		</button>
	  </h5>
	</div>

	<div id="collapseOne" class="collapse" aria-labelledby="headingOne" data-parent="#accordionExample">
	  <div class="card-body">
		Aplikacja korzysta z Google API, bla bla bla....<br><br>
	  </div>
	</div>
  </div>
 </div>
<div class="row" style="margin-left:20px; margin-right:20px; margin-bottom:20px;">
	<div class="col-md-6" style="height:620px; width: 75%;">
		<div id="map" style="height:600px; width: 100%;"></div>
	</div>
	<div class="col-md-6" style="width: 25%;">
		<div class="col-md-6" style="width: 80%;">
			<input type="image" id="currentLocationButton" src="/images/currentLocation.jpg" style="height:20px;width:20px;">
			<form id = "fr">
				<input type="text" id="origin" style="width:100%" placeholder = "Punkt początkowy" style="margin-top:5px;" required> <br><br> 
				<input type="text" id="destination" style="width:100%" placeholder = "Punkt docelowy" required><br><br>
				<select id="selectCar"></select><br><br>
				<input type=number id="batteryLevelSelect" style="width:55%" placeholder="Poziom baterii [%]" min=1 max=100><br><br>
			</form>
			<button type="button" id="findRouteButton">Szukaj ładowarek</button>
		</div>
	</div>
</div>

<script src="https://maps.googleapis.com/maps/api/js?key=@(key + "&callback=initMap")" async defer></script>
<script src="~/lib/jquery/dist/jquery.min.js"></script>
<script type="text/javascript" src="@Url.Content("~/lib/jquery/dist/jquery.js")"></script>
<script src="https://code.jquery.com/jquery-3.3.1.slim.min.js" integrity="sha384-q8i/X+965DzO0rT7abK41JStQIAqVgRVzpbzo5smXKp4YfRvH+8abtTE1Pi6jizo" crossorigin="anonymous"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.3/umd/popper.min.js" integrity="sha384-ZMP7rVo3mIykV+2+9J3UJ46jBk0WLaUAdn689aCwoqbBJiSnjAK/l8WvCWPIPm49" crossorigin="anonymous"></script>
<script src="https://stackpath.bootstrapcdn.com/bootstrap/4.1.3/js/bootstrap.min.js" integrity="sha384-ChfqqxuZUCnJSK3+MXmPNIyE6ZbWh2IMqE241rYiqJxyMiZ6OW/JmZQ5stwEULTy" crossorigin="anonymous"></script>

<script>

	//Map function ----
	var map;
	var directionsService;
	var directionsRenderer;
	var carList;

	function initMap() { //zainicjowanie mapy
		map = new google.maps.Map(document.getElementById('map'), {
			center: {lat: 53.082100, lng: 18.228580},
			zoom: 8,
		});
	}

	async function calcRoute() { //wyznaczenie trasy, wyzwalacz guzika znajdź trasę

		//pobranie gniazd ładowania obecnie wybranego samochodu
		var selectCarList = document.getElementById('selectCar');
		var connectors = carList[selectCarList.selectedIndex].connectors;
		var carMaximumDistance = carList[selectCarList.selectedIndex].maximumDistance;
		var chargingStations = @Html.Raw(Json.Serialize(chargingStationsList));
		var chargingStationsByConnectors = new Array();
		var chargingStationsNearRoute = new Array();
		var route;

		chargingStations.forEach(chargingStation => {
			chargingStation.chargingPoints.forEach(chargingPoint => {
				connectors.forEach(connector => {
					if(chargingPoint.connector.name == connector.name) {
						chargingStationsByConnectors.push(chargingStation); //dodanie do tablicy ładowarek, które odpowiadają gniazdom ładowania samochodu
					}
				});
			});
		});


		var startBox = document.getElementById("origin");
		var destinationBox = document.getElementById("destination");
		if(!startBox.value||!destinationBox.value) {
			window.alert("Proszę wypełnić pola trasy.");
		} else {
			directionsService = new google.maps.DirectionsService();
			directionsRenderer = new google.maps.DirectionsRenderer();
			directionsRenderer.setMap(map);
			var myOrigin;
			var myDestination;
			if(startBox.value&&destinationBox.value) {
				const temp1 = await fetchAddress(startBox.value);
				const temp2 = await fetchAddress(destinationBox.value);
				myOrigin = new google.maps.LatLng(parseFloat(temp1[0].replace(",",".")),parseFloat(temp1[1].replace(",",".")));
				myDestination = new google.maps.LatLng(parseFloat(temp2[0].replace(",",".")),parseFloat(temp2[1].replace(",",".")));

				var request = {
					origin: myOrigin,
					destination: myDestination,
					travelMode: 'DRIVING'
				};

				directionsService.route(request, function(response, status) { //sprawdź czy ładowarka jest w pobliżu trasy
					if(status == google.maps.DirectionsStatus.OK) {
						route = response.routes[0];
						numberOfRechargesCallback(route.legs[0].distance.text, route, carMaximumDistance);
						directionsRenderer.setDirections(response);
						chargingStationsByConnectors.forEach(station => {
							var stationLat = station.latitude;
							var stationLong = station.longitude;
							var stationCoordinates = new google.maps.LatLng(stationLat, stationLong);
							if(google.maps.geometry.poly.isLocationOnEdge(stationCoordinates, new google.maps.Polyline({ path: google.maps.geometry.encoding.decodePath(route.overview_polyline) }), 0.1))
								chargingStationsNearRoute.push(station); //dodanie ładowarki, która jest w pobliżu trasy
						});
						if(chargingStationsNearRoute.length == 0) {
							window.alert("Brak ładowarek elektrycznych w pobliżu wyznaczonej trasy!");
						}
						else { //wyświetlenie przefiltrowanych ładowarek
							chargingStationsNearRoute.forEach(station => {
								var stationState = "Aktywna";
								if(station.stationState == 0) {
									stationState = "Zamknięta";
								}
								var marker = new google.maps.Marker({
									position: { lat: station.latitude, lng: station.longitude },
									map: map,
								});
								var infoWindow = new google.maps.InfoWindow({
									content: "<p>Stacja: " + station.name + "<br>Koordynaty: " + station.latitude + ", " 
									+ station.longitude + "<br>Adres: " + station.city + " " + station.postalAdress + ", "
									+ station.street + "<br>Godziny otwarcia: " + station.openHours + "<br>Właściciel: "
									+ station.owner + "<br>Stan stacji: " + stationState + "<br><a href='https://www.google.pl/maps?q=" + station.latitude + ",+" + station.longitude + "'>Otwórz w google maps</a></p>",
								});
								google.maps.event.addListener(marker, "click", () => {
									infoWindow.open(map,marker);
								});
							});
						}
					}
					else
						alert("Błąd wyznaczania trasy. Status: " + status) //obsługa błędu
				});
			}
		}
	}

	function checkIfIsOnRoute(polyline, point) { //funkcja sprawdza, czy punkt jest na trasie
		var x = new google.maps.LatLng(53.030622, 18.197513); //testowy punkt
		if(google.maps.geometry.poly.isLocationOnEdge(point, polyline, 0.01))
			return "x";
	}

	async function numberOfRechargesCallback(distance, route, carMaximumDistance) {
		var carBatteryLevel = document.getElementById("batteryLevelSelect").value;
		numberOfRecharges = await fetchNumberOfRecharges(distance, carMaximumDistance, carBatteryLevel);
		window.alert("NR " + numberOfRecharges);
	}

	async function fetchAddress(address) { //zamiana adresu na współrzędne poprzez API
		try {
			const response = await fetch(window.location.href + "geo/getCoordinates?key=" + "@geoKey" + "&address=" + address);
			const coordinates = await response.json();
			return coordinates;
		} catch(error) {
			console.error(error);
		}
	}

	async function fetchNumberOfRecharges(distance, maxDistance, batteryLevel) {
		try {
			const response = await fetch(window.location.href + "distance/getNumberOfRecharges?routeDistance=" + distance + "&maxDistance=" + maxDistance + "&batteryLevel=" + batteryLevel);
			const numberOfRecharges = await response.json();
			return numberOfRecharges;
		} catch(error) {
			console.error(error);
		}
	}

	function checkFlag(flag) {
		if(flag == false) {
			window.setTimeout(checkFlag, 100);
		} else {
			return true;
		}
	}

	function init() {
		document.getElementById("findRouteButton").addEventListener("click", function() {calcRoute();});
		carList = @Html.Raw(Json.Serialize(Model));
		for (var i = 0; i < carList.length; i++ ) {
			$("#selectCar").append("<option value='" + carList[i].brand + "'>" + carList[i].model + "</option>");
		}
	}
	window.onload = init();

</script>

<script type="text/javascript">
	var element = document.getElementById("origin");
	document.getElementById("currentLocationButton").addEventListener("click", function(){ var coords = getCurrentLocation(); element.value = coords[0]; });


	function getCurrentLocation() {
		if(navigator.geolocation) {
			navigator.geolocation.getCurrentPosition(useLocation);
		}
	}

	function useLocation(position) {
		url = window.location.href + "geo/getAddress?key=" + "@geoKey" + "&longitude=" + position.coords.longitude + "&latitude=" + position.coords.latitude;
		fetch(url)
		.then(res => res.text())
		.then(data => {
			element.value = data;
		});
	}

</script>


</body>

