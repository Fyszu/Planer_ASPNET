@using Microsoft.AspNetCore.Identity
@using ASP_MVC_NoAuthentication.Data
@using Microsoft.Extensions.Configuration
@using System.Net
@using System.Text;
@using System.Web;
@using Newtonsoft.Json;
@using System.Globalization
@inject SignInManager<User> SignInManager
@inject UserManager<User> UserManager

@{
    ViewData["Title"] = "Planer tras";
}
@model List<Car> //List of default cars + potential user's cars if logged in, returned by controlller
@inject IConfiguration Configuration
@{
    string geoKey = Configuration.GetValue<string>("MyApiKey");
    string key = Configuration.GetValue<string>("AuthKey");
    List<ChargingStation> chargingStationsList = new List<ChargingStation>();
    using (WebClient wc = new WebClient())
    {
        wc.Headers[HttpRequestHeader.ContentType] = "application/json";
        wc.Encoding = Encoding.UTF8;
        wc.Headers.Add("User-Agent: Other");
        string result = wc.DownloadString("https://localhost:7288/chargingstation/getAllChargingStations");
        chargingStationsList = Newtonsoft.Json.JsonConvert.DeserializeObject<List<ChargingStation>>(result);
    }
}


<head>
    <!-- My CSS -->
    <link rel="stylesheet" href="~/css/Home.css">
    <!--- Header font import --->
    <style>
        @@import url('https://fonts.googleapis.com/css2?family=Merriweather:ital,wght@1,900&display=swap');
    </style>
    <!-- JQuery -->
    <link rel="stylesheet" href="//code.jquery.com/ui/1.13.2/themes/base/jquery-ui.css">
</head>


<body>
    <!-- Main top image -->
    <img src="/images/ecars_banner.jpg" class="img-fluid" id="headerImage" alt="Header image">
    <!-- Header -->
    <h1>Planer tras dla samochodów elektrycznych</h1>

    <!-- Short description -->
    <p>Cześć! Znajdujesz się na stronie aplikacji automatyzującej planowanie podróży samochodem elektrycznym.</p>
    <p>Wypełnij pola poniżej oraz klknij "<b>Szukaj ładowarek</b>", a zostaną znalezione dla Ciebie ładowarki w pobliżu trasy podróży.</p>
    <p>Aplikacja korzysta z <b>Google API</b> do wyznaczania tras oraz bierze pod uwagę realny zasięg Twojego samochodu. <br /><em><a href="/Info">Kliknij po więcej informacji.</a></em></p>
    @if (!SignInManager.IsSignedIn(User))
    {
            <p><b><a href="/Identity/Account/Login">Zaloguj się</a></b> w celu dodania swojego samochodu do listy oraz zmiany ustawień.</p>
    }

    <!-- Route form  --->
    <form id="fr">
        <div class="row align-items-end" style="margin-left:3%; margin-right: 3%; margin-top:4%">
            <div class="col-sm top-buffer text-center origin-column">
                <h2 style="margin-right:12%;">Początek podróży</h2>
                <input class="inputForm align-middle" type="text" id="origin" style="width:88%; max-width:70vw; min-height: 5vh;" placeholder="Wpisz punkt początkowy" required>
                <input class="align-middle" type="image" id="currentLocationButton" name="currentLocationButton" src="/images/currentLocation.png" onClick="getCurrentLocation(); return false;">
            </div>
            <div class="col-sm top-buffer text-center">
                <h2>Koniec podróży</h2>
                <input class="inputForm align-middle" type="text" style="width:100%; max-width:70vw; min-height: 5vh;" id="destination" placeholder="Wpisz punkt docelowy" required>
            </div>
            <div class="col-sm top-buffer text-center">
                <h2><img src="@Url.Content("~/images/question_mark.png")" class="questionMark" data-toggle="tooltip" data-placement="bottom" title="Nie możesz znaleźć swojego samochodu na liście? Zaloguj się i dodaj własny!" /> Samochód:</h2>
                <select class="inputForm align-middle" id="selectCar" style="width:100%; max-width:70vw; min-height: 5vh;"></select>
            </div>
            <div class="col-sm top-buffer text-center">
                <h2><img src="@Url.Content("~/images/question_mark.png")" class="questionMark" data-toggle="tooltip" data-placement="bottom" title="Podaj aktualny (lub planowany) stan baterii Twojego samochodu." /> Stan baterii</h2>
                <input class="inputForm align-middle" type=number id="batteryLevelSelect" style="width:100%; max-width:70vw; min-height: 5vh;" placeholder="Poziom baterii [%]" min=1 max=100>
            </div>
            <div class="col-sm top-buffer text-center" style="min-height:100%">
                <button class="inputForm search-button align-middle" type="button" style="width:100%; max-width:70vw; min-height: 5vh;" id="findRouteButton">Szukaj ładowarek</button>
            </div>
        </div>
    </form>

    <!-- Map -->
    <div class="map" id="map"></div>

    <!-- Stops on the route form -->
    <div class="stopsForm">
        <h2>Twoja trasa</h2>
        <ul id="originStopList">

        </ul>
        <ul id="sortable">

        </ul>
        <ul id="destinationStopList">

        </ul>
        <button id="openStopsInGoogleButton">Otwórz w google maps</button>
    </div>


    <!---- End of HTML ---->
    <!--- JS Libraries --->
    <script src="https://code.jquery.com/jquery-3.6.0.js"></script>
    <script src="https://code.jquery.com/ui/1.13.2/jquery-ui.js"></script>
    <script src="~/lib/bootstrap/dist/js/bootstrap.bundle.min.js"></script>
    <script src="~/js/site.js" asp-append-version="true"></script>
    <script src="https://polyfill.io/v3/polyfill.min.js?features=default"></script>

    <!----------- JavaScript functions ----------->
    <script type="text/javascript">

        var map; //Google map object
        var directionsService; //Google map routes services for javascript
        var directionsRenderer;
        var chargingStations = @Html.Raw(Json.Serialize(chargingStationsList)); //Charging stations from page model
        var chargingRadius; //Real distance which car can travel on current battery level
        var carList; //List of cars to choose (from page model, default cars + user cars)
        var carListComboBox = document.getElementById('selectCar'); //Html combo box for car selection
        var markersArray = []; //Array of charging stations markers
        var stops = new Array(); // array for stops in format [["1.000,1.000",name,id,order],["2.000,2.000",name2,id2,order2]]
        const originField = document.getElementById("origin");
        const destinationField = document.getElementById("destination");
        var stopCount = 1;

        window.onload = init(); //Call init function on page load



        //Google map initialization
        function initMap() {
            map = new google.maps.Map(document.getElementById('map'), {
                center: { lat: 53.082100, lng: 18.228580 },
                zoom: 8,
            });
            directionsService = new google.maps.DirectionsService();
            directionsRenderer = new google.maps.DirectionsRenderer();
            chargingRadius = new google.maps.Circle({
                strokeColor: "#14f562",
                strokeOpacity: 0.8,
                strokeWeight: 2,
                fillColor: "#14f562",
                fillOpacity: 0.35,
            });

            //----Autocomplete init----
            const originSearchBox = new google.maps.places.SearchBox(originField);
            const destinationSearchBox = new google.maps.places.SearchBox(destinationField);

            map.addListener("bounds_changed", () => {
                originSearchBox.setBounds(map.getBounds());
                destinationSearchBox.setBounds(map.getBounds());
            });

            originSearchBox.addListener("places_changed", () => {
                const places = originSearchBox.getPlaces();

                if (places.length == 0) {
                    return;
                }

                const bounds = new google.maps.LatLngBounds();

                places.forEach((place) => {
                    if (!place.geometry || !place.geometry.location) {
                        console.log("Returned place contains no geometry.");
                        return;
                    }

                    const icon = {
                        url: place.icon,
                        size: new google.maps.Size(71, 71),
                        origin: new google.maps.Point(17, 34),
                        scaledSize: new google.maps.Size(25, 25),
                    };

                    if (place.geometry.viewport) {
                        bounds.union(place.geometry.viewport);
                    } else {
                        bounds.extend(place.geometry.location);
                    }
                });
                map.fitBounds(bounds);
            });
        }

        //Function called on page load - parsing list of cars array to JavaScript, initializing and adding list to choice box
        function init() {
            document.getElementById("findRouteButton").addEventListener("click", function () { calcRoute(); });
            document.getElementById("openStopsInGoogleButton").addEventListener("click", function () { openStopsInGoogleMaps(); });
            carList = @Html.Raw(Json.Serialize(Model));
        @for (int i = 0; i < Model.Count; i++)
        {
            @:$("#selectCar").append("<option value='" + @i + "'>" + "@Model[i].Brand" + " " + "@Model[i].Model" + " Zasięg: " + "@Model[i].MaximumDistance" + "km (" + "@Model[i].ConnectorsToString()" + ")" + "</option>");
        }
        }

        // Add sortable function for stops list
        $( function() {
            $( "#sortable" ).sortable({
                 start: function(e, ui) {
                    $(this).attr('stopOrder', ui.item.index() + 1);
                },
                update: function(event, ui) {
                    var newIndex = ui.item.index() + 1;
                    var oldIndex = $(this).attr('stopOrder');
                    window.alert("new = " + newIndex + " old = " + oldIndex);
                    stops.forEach(stop => {
                        if (newIndex < oldIndex && (oldIndex > stop[3] && newIndex <= stop[3]))
                            stop[3]++;
                        if (newIndex > oldIndex && (newIndex >= stop[3] && oldIndex < stop[3]))
                            stop[3]--;
                    });
                    stops[oldIndex][3] = newIndex;
                    stops.sort((a,b) => (a[3] > b[3]) ? 1 : -1);
                    $(this).removeAttr('stopOrder');
                }
            });
        } );

        // Delete stops on button click function
        $("#sortable").on('click','.btn-delete',function() {
            r = confirm('Usunąć ten przystanek?');
            if(r) {
                let stopName = $(this).closest('li').text().replace('Usuń','');
                $(this).closest('li').remove();
                order = stops.find(stop => stop[1] == stopName)[3];
                stops = stops.filter(stop => stop[1] != stopName);
                stops.forEach(stop => {
                    if (stop[3] > order)
                        stop[3]--;
                });
                stops.sort((a,b) => (a[3] > b[3]) ? 1 : -1);
                stopCount--;
            }
        });

        //Set route, find charging stations near route and set markers
        async function calcRoute() {

            if (!originField.value || !destinationField.value) {
                window.alert("Proszę wypełnić pola trasy.");
            }
            else if (!(document.getElementById("batteryLevelSelect").value)) {
                window.alert("Proszę podać stan baterii.");
            }
            else if ((document.getElementById("batteryLevelSelect").value > 100) || document.getElementById("batteryLevelSelect").value < 1) {
                window.alert("Proszę podać realny stan baterii.");
            }

            else {
                var choosedCar = carList[carListComboBox.selectedIndex];
                directionsRenderer.setMap(null); //Reset map (clear from previous routes)
                clearMarkers();
                directionsRenderer.setMap(map);
                chargingRadius.setMap(null);
                chargingRadius.setMap(map);

                var originCoordinates = await fetchAddress(originField.value);
                var destinationCoordinates = await fetchAddress(destinationField.value);

                // Add origin and destination as stops in floating form
                addStopToArray(originCoordinates.lat(), originCoordinates.lng(), originField.value, "originStop");
                addStopToArray(destinationCoordinates.lat(), destinationCoordinates.lng(), destinationField.value, "destinationStop");

                const radius = await fetchRealDistance(carList[carListComboBox.selectedIndex].maximumDistance, document.getElementById("batteryLevelSelect").value);

                chargingRadius.setCenter(originCoordinates);
                chargingRadius.setRadius(radius);

                var routeGoogleApiRequest = {
                    origin: originCoordinates,
                    destination: destinationCoordinates,
                    travelMode: 'DRIVING'
                };

                directionsService.route(routeGoogleApiRequest, function (response, status) {
                    if (status == "ZERO_RESULTS")
                        alert("Nie znaleziono żadnej trasy dla podanych adresów.");
                    else if (status != google.maps.DirectionsStatus.OK)
                        alert("Błąd wyznaczania trasy. Status: " + status); //obsługa błędu
                    else //Status is OK
                    {
                        var route = response.routes[0];
                        var routePolyline = new google.maps.Polyline({ path: google.maps.geometry.encoding.decodePath(route.overview_polyline) });
                        directionsRenderer.setDirections(response);
                        //numberOfRechargesCallback(route.legs[0].distance.text, route, choosedCar.maximumDistance);

                        //Filter stations to near-route stations
                        var chargingStationsNearRoute = new Array();
                        chargingStations.forEach(station => {
                            var stationCoordinates = new google.maps.LatLng(station.latitude, station.longitude);
                            if (google.maps.geometry.poly.isLocationOnEdge(stationCoordinates, routePolyline, 0.1))
                                chargingStationsNearRoute.push(station);
                        });

                        if (chargingStationsNearRoute.length == 0)
                            window.alert("Brak ładowarek elektrycznych w pobliżu wyznaczonej trasy!");
                        else {
                            //Set charging stations as markers with info
                            chargingStationsNearRoute.forEach(station => {
                                var stationState = "Aktywna";
                                if (station.stationState == 0) {
                                    stationState = "Zamknięta";
                                }
                                var stationCoordinates = [station.latitude, station.longitude];
                                //Check if station has same connector as car - then, if yes show marker as green, otherwise show as yellow
                                var stationHasCorrectConnector = false;
                                station.chargingPoints.forEach(chargingPoint => {
                                    choosedCar.connectors.forEach(carConnector => {
                                        if (chargingPoint.connector.name == carConnector.name) {
                                            stationHasCorrectConnector = true;
                                        }
                                    });
                                });

                                var marker = new google.maps.Marker({
                                    position: { lat: station.latitude, lng: station.longitude },
                                    map: map,
                                });
                                if (stationHasCorrectConnector)
                                    marker.setIcon('http://maps.google.com/mapfiles/ms/icons/green-dot.png');
                                else
                                    marker.setIcon('http://maps.google.com/mapfiles/ms/icons/yellow-dot.png');
                                markersArray.push(marker);

                                //Create of marker's information window and attach click listener
                                var markerDetails = new google.maps.InfoWindow({
                                    content: "<div class='infoWindowContent'><b>Stacja:</b> " + station.name 
                                        + "<br><b>Współrzędne:</b> " + station.latitude.toFixed(6) + ", " + station.longitude.toFixed(6)
                                        + "<br><b>Adres: </b>" + station.city + " " + station.postalAdress + ", " + station.street 
                                        + "<br><b>Godziny otwarcia:</b> " + station.openHours 
                                        + "<br><b>Właściciel:</b> " + station.owner
                                        + "<br><b>Stan stacji:</b> " + stationState 
                                        + "<br><br><b><a href='#' onclick='addStopToArray(\"" + station.latitude + "\",\"" + station.longitude + "\",\"" + station.name +"\"," + station.id +");'>Dodaj jako przystanek</a></b>"
                                        + "<br>Lub:"
                                        + "<br><b><a href='https://www.google.pl/maps?q=" + station.latitude + "," + station.longitude + "'>Otwórz w google maps</a></b></div>",
                                });
                                google.maps.event.addListener(marker, "click", () => {
                                    markerDetails.open(map, marker);
                                });
                            });
                        }
                    }
                });
            }
        } //End of calcRoute function

        //Handling google api responses other than 'OK', while getting coordinates from address
        function statusErrorHandler(status, address) {
            switch (status) {
                case ("ZERO_RESULTS"):
                    alert("Can't find any results for address \"" + address + "\"");
                    break;
                case ("INVALID_REQUEST"):
                    alert("Invalid request - probably query is missing for address \"" + address + "\"");
                    break;
                case ("GOOGLEAPI_ERROR"):
                    alert("Problem while parsing result from google api has occured for address \"" + address + "\"");
                    break;
                case ("WRONG_KEY"):
                    alert("Wrong geocode api key.");
                    break;
                default:
                    alert("Unknown error has occured for \"" + address + "\" ");
                    break;
            }
        }

        async function numberOfRechargesCallback(distance, route, carMaximumDistance) {
            var carBatteryLevel = document.getElementById("batteryLevelSelect").value;
            numberOfRecharges = await fetchNumberOfRecharges(distance, carMaximumDistance, carBatteryLevel);
        }

        //Converting address to coordinates, using GeoController (getCoordinates), ultimately using google api
        async function fetchAddress(address) {
            try {
                const response = await fetch(window.location.href + "geo/getCoordinates?key=" + "@geoKey" + "&address=" + address);
                const geoArray = await response.json();
                if (geoArray["Status"] == "OK")
                    return new google.maps.LatLng(parseFloat(geoArray["Coordinates"]["Lat"]), parseFloat(geoArray["Coordinates"]["Lng"]));
                else
                    statusErrorHandler(geoArray["Status"], address);
            } catch (error) {
                console.error(error);
            }
        }

        //Get number of car recharges for currrent route from api controller (DistanceController | getNumberOfRecharges)
        async function fetchNumberOfRecharges(distance, maxDistance, batteryLevel) {
            try {
                const response = await fetch(window.location.href + "distance/getNumberOfRecharges?routeDistance=" + distance + "&maxDistance=" + maxDistance + "&batteryLevel=" + batteryLevel);
                const numberOfRecharges = await response.json();
                return numberOfRecharges;
            } catch (error) {
                console.error(error);
            }
        }

        //Get real distance from api controller (DistanceController | getRealDistance)
        async function fetchRealDistance(maxDistance, batteryLevel) {
            try {
                const response = await fetch(window.location.href + "distance/getRealDistance?maximumDistance=" + maxDistance + "&batteryLevel=" + batteryLevel);
                const realDistance = await response.json();
                return realDistance;
            } catch (error) {
                console.error(error);
            }
        }

        //Clear charging station markers from map
        function clearMarkers() {
            markersArray.forEach(marker => {
                marker.setMap(null);
            });
            markersArray.length = 0;
        }

        //Get user's current location function
        function getCurrentLocation() {
            if (navigator.geolocation) {
                navigator.geolocation.getCurrentPosition(useLocation);
            }
        }

        //User's location parsing coordinates -> address and set it to origin field
        function useLocation(position) {
            url = window.location.href + "geo/getAddress?key=" + "@geoKey" + "&longitude=" + position.coords.longitude + "&latitude=" + position.coords.latitude;
            fetch(url)
                .then(res => res.json())
                .then(data => {
                    if (data["Status"] == "OK")
                        originField.value = data["Address"];
                    else
                        alert("Problem with getting current localization has occured. Please type address manually.");
                });
        }

        // Add stop to floating form
        function addStopToArray(latitude, longitude, stopName, stopId) {
            if (stopCount >= 20) {
                window.alert("Maksymalna liczba przystanków to 20.");
            }
            else {
                var coordinates = latitude + "," + longitude;
                var stopsListElement;
                var node = document.createElement("li");
                var stopElement = document.createElement("a");
                stopElement.innerText = stopName;
                stopElement.setAttribute('id', stopId);
                var removeButton;

                if (stopId == "originStop") {
                    stopsListElement = document.getElementById("originStopList");
                    node.appendChild(stopElement);
                    stopsListElement.appendChild(node);
                    stopElement.setAttribute('stopOrder',1);
                    var stop = [coordinates, stopName, stopId, 0];
                    stops.push(stop);
                }
                else if (stopId == "destinationStop") {
                    stopsListElement = document.getElementById("destinationStopList");
                    node.appendChild(stopElement);
                    stopsListElement.appendChild(node);
                    stopElement.setAttribute('stopOrder',20);
                    var stop = [coordinates, stopName, stopId, 20];
                    stops.push(stop);
                    stops.sort((a,b) => (a[3] > b[3]) ? 1 : -1);
                }
                else {
                    stopsListElement = document.getElementById("sortable");
                    stopElement.setAttribute('class', 'ui-state-default');
                    removeButton = document.createElement("a");
                    removeButton.innerText = "Usuń";
                    removeButton.setAttribute('class', 'btn btn-delete btn-danger');
                    node.appendChild(stopElement);
                    node.appendChild(removeButton);
                    stopsListElement.appendChild(node);
                    stopElement.setAttribute('stopOrder',stopCount);
                    var stop = [coordinates, stopName, stopId, stopCount];
                    stops.push(stop);
                    stopCount++;
                    stops.sort((a,b) => (a[3] > b[3]) ? 1 : -1);
                }
            }
        }


        function openStopsInGoogleMaps() {
            var link = "https://www.google.com/maps/dir/";
            var destinationCoordinates = "";
            stops.sort((a,b) => (a[3] > b[3]) ? 1 : -1);
            stops.forEach(stop => {
                link += stop[0] + "/";
            });
            link += destinationCoordinates;
            window.open(link);
        }

        // Tooltip appearance script
        $(function () {
            $('[data-toggle="tooltip"]').tooltip();
        })
    </script>

    <!-- Google map initialization using personal api key and creating map -->
    <script src="https://maps.googleapis.com/maps/api/js?key=@(key + "&callback=initMap&libraries=places")" async defer></script>

</body>
