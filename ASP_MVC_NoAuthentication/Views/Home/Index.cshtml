@using Microsoft.AspNetCore.Identity
@using ASP_MVC_NoAuthentication.Data
@using Microsoft.Extensions.Configuration
@using System.Net
@using System.Text;
@using System.Web;
@using Newtonsoft.Json;
@using System.Globalization

@{
	ViewData["Title"] = "Planer tras";
}
@model List<Car> //List of default cars + potential user's cars if logged in, returned by controlller
@inject IConfiguration Configuration
@{
	string geoKey = Configuration.GetValue<string>("MyApiKey");
	string key = Configuration.GetValue<string>("AuthKey");
	List<ChargingStation> chargingStationsList = new List<ChargingStation>();
	using (WebClient wc = new WebClient())
	{
		wc.Headers[HttpRequestHeader.ContentType] = "application/json";
		wc.Encoding = Encoding.UTF8;
		wc.Headers.Add("User-Agent: Other");
		string result = wc.DownloadString("https://localhost:7288/chargingstation/getAllChargingStations");
		chargingStationsList = Newtonsoft.Json.JsonConvert.DeserializeObject<List<ChargingStation>>(result);
	}
}

<!-- Bootstrap -->
<link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.1.3/css/bootstrap.min.css" integrity="sha384-MCw98/SFnGE8fJT3GXwEOngsV7Zt27NXFoaoApmYm81iuXoPkFOJwJ8ERdknLPMO" crossorigin="anonymous">

<head>
	<!-- Main top image -->
	<img src="/images/top_image_wide.jpg" class="img-fluid" alt="Responsive image" style="position:relative; width:100%">
</head>


<body>

	<!-- Short description -->
	<p style="margin-top:60px; margin-left:25px; margin-bottom: 0px; font-family:'Avenir Next LT Pro'; font-size:13pt;">Aplikacja automatyzująca planowanie podróży samochodem elektrycznym. Aby wyszukać optymalne ładowarki na trasie, wpisz początek i cel swojej podróży oraz wybierz samochód i stan baterii. Aby dodać własny samochód, zaloguj się.<br><br></p>

	<!-- Accordion description -->
	<div class="accordion" id="accordionExample" style="margin-top:0px; margin-bottom:25px;">
	  <div class="card">
		<div class="card-header" id="headingOne">
		  <h5 class="mb-0">
			<button class="btn btn-link" type="button" data-toggle="collapse" data-target="#collapseOne" aria-expanded="false" aria-controls="collapseOne">
			  Kliknij aby wyświetlić więcej informacji...
			</button>
		  </h5>
		</div>
		<div id="collapseOne" class="collapse" aria-labelledby="headingOne" data-parent="#accordionExample">
		  <div class="card-body">
			Aplikacja wyszukuje ładowarki na trasie Twojej podróży, jednocześnie wskazując realny zasięg Twojego samochodu (zielony okrąg na mapie).<br>Realny zasięg jest automatycznie obliczany biorąc pod uwagę początkowy stan baterii, styl jazdy (zarejestrowani użytkownicy) oraz aktualny sezon (w zimę i w lato występują spadki wydajności z powodu korzystania z ogrzewania lub klimatyzacji). Parametry te można dostosować w panelu użytkownika po zalogowaniu się. Można tam również dodać własny samochód, jeśli nie możesz znaleźć go na liście.<br>Aby wyznaczyć trasę podróży, wpisz początek, cel podróży, wybierz samochód z listy oraz stan baterii. Następnie wybierz najbardziej oddaloną ładowarkę na trasie która mieści się w okręgu. Po wciśnięciu pinezki kliknij "Otwórz w google maps" - zostanie otwarta lokalizacja ładowarki w google maps. Teraz możesz wyznaczyć trasę oraz dodać kolejny przystanek w trasie (miejsce docelowe) i możesz być spokojny o dojechanie do celu swoim samochodem elektrycznym.<br />Aby uzyskać więcej informacji o aplikacji, kliknij w zakładkę "O aplikacji" na górnym pasku nawigacji.<br /><br />
		  </div>
		</div>
	  </div>
	 </div>

	<!-- Map and choice fields grid -->
	<div class="row" style="margin-left:20px; margin-right:20px; margin-bottom:20px;">
		<!-- First collumn - map field anchor -->
		<div class="col-md-6" style="height:620px; width: 75%;">
			<div id="map" style="height:600px; width: 100%;"></div>
		</div>
		<!-- Second collumn - choice fields-->
		<div class="col-md-6" style="width: 25%;">
			<div class="col-md-6" style="width: 80%;">
				<label for="currentLocationButton">Aktualna lokacja</label>
				<input type="image" id="currentLocationButton" name="currentLocationButton" src="/images/currentLocation.jpg" style="height:20px;width:20px;">
				<form id = "fr">
					Początek podróży:<br />
					<input type="text" id="origin" style="width:100%" placeholder = "Wpisz punkt początkowy" style="margin-top:5px;" required> <br><br> 
					Koniec podróży:<br />
					<input type="text" id="destination" style="width:100%" placeholder = "Wpisz punkt docelowy" required><br><br>
					Samochód:<br />
					<select id="selectCar"></select><br><br>
					<em>Nie możesz znaleźć swojego samochodu na liście? Zaloguj się i dodaj własny!</em><br />
					<br />Stan baterii:<br />
					<input type=number id="batteryLevelSelect" style="width:55%" placeholder="Poziom baterii [%]" min=1 max=100><br><br>
				</form>
				<button type="button" id="findRouteButton">Szukaj ładowarek</button>
			</div>
		</div>
	</div>

</body>


<!---------------- JavaScript ---------------->
<!-- Google map initialization using personal api key and creating map -->
<script src="https://maps.googleapis.com/maps/api/js?key=@(key + "&callback=initMap")" defer></script>

<!-- Libraries -->
<script src="~/lib/jquery/dist/jquery.min.js"></script>
<script type="text/javascript" src="@Url.Content("~/lib/jquery/dist/jquery.js")"></script>
<script src="https://code.jquery.com/jquery-3.3.1.slim.min.js" integrity="sha384-q8i/X+965DzO0rT7abK41JStQIAqVgRVzpbzo5smXKp4YfRvH+8abtTE1Pi6jizo" crossorigin="anonymous"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.3/umd/popper.min.js" integrity="sha384-ZMP7rVo3mIykV+2+9J3UJ46jBk0WLaUAdn689aCwoqbBJiSnjAK/l8WvCWPIPm49" crossorigin="anonymous"></script>
<script src="https://stackpath.bootstrapcdn.com/bootstrap/4.1.3/js/bootstrap.min.js" integrity="sha384-ChfqqxuZUCnJSK3+MXmPNIyE6ZbWh2IMqE241rYiqJxyMiZ6OW/JmZQ5stwEULTy" crossorigin="anonymous"></script>
<script src="https://js.arcgis.com/4.4/"></script> <!--- ArcGIS geometry API --->


<!----------- JavaScript functions ----------->
<script>

	var map; //Google map object
	var directionsService; //Google map routes services for javascript
	var directionsRenderer;
	var chargingStations = @Html.Raw(Json.Serialize(chargingStationsList)); //Charging stations from page model
	var chargingRadius; //Real distance which car can travel on current battery level
	var carList; //List of cars to choose (from page model, default cars + user cars)
	var carListComboBox = document.getElementById('selectCar'); //Html combo box for car selection
	var markersArray = []; //Array of charging stations markers

	window.onload = init(); //Call init function on page load

	//Google map initialization
	function initMap() {
		map = new google.maps.Map(document.getElementById('map'), {
			center: {lat: 53.082100, lng: 18.228580},
			zoom: 8,
		});
		directionsService = new google.maps.DirectionsService();
		directionsRenderer = new google.maps.DirectionsRenderer();
		chargingRadius = new google.maps.Circle({
			strokeColor: "#14f562",
			strokeOpacity: 0.8,
			strokeWeight: 2,
			fillColor: "#14f562",
			fillOpacity: 0.35,
		});
	}

	//Function called on page load - parsing list of cars array to JavaScript, initializing and adding list to choice box
	function init() {
		document.getElementById("findRouteButton").addEventListener("click", function() { calcRoute(); });
		carList = @Html.Raw(Json.Serialize(Model));
		@for(int i = 0; i < Model.Count; i++)
		{
			@:$("#selectCar").append("<option value='" + @i + "'>" + "@Model[i].Brand" + " " + "@Model[i].Model" + " Zasięg: " + "@Model[i].MaximumDistance" + "km (" + "@Model[i].ConnectorsToString()" + ")" + "</option>");
		}
	}

	//Set route, find charging stations near route and set markers 
	async function calcRoute() {

		var originTextField = document.getElementById("origin");
		var destinationTextField = document.getElementById("destination");

		if(!originTextField.value||!destinationTextField.value) {
			window.alert("Proszę wypełnić pola trasy.");
		}
		else if(!(document.getElementById("batteryLevelSelect").value)) {
			window.alert("Proszę podać stan baterii.");
		}

		else
		{
			var choosedCar = carList[carListComboBox.selectedIndex];
			directionsRenderer.setMap(null); //Reset map (clear from previous routes)
			clearMarkers();
			directionsRenderer.setMap(map);
			chargingRadius.setMap(null);
			chargingRadius.setMap(map);

			var originCoordinates = await fetchAddress(originTextField.value);
			var destinationCoordinates = await fetchAddress(destinationTextField.value);
			const radius = await fetchRealDistance(carList[carListComboBox.selectedIndex].maximumDistance, document.getElementById("batteryLevelSelect").value);

			chargingRadius.setCenter(originCoordinates);
			chargingRadius.setRadius(radius);

			var routeGoogleApiRequest = {
				origin: originCoordinates,
				destination: destinationCoordinates,
				travelMode: 'DRIVING'
			};

			directionsService.route(routeGoogleApiRequest, function(response, status)
			{
				if(status == "ZERO_RESULTS")
					alert("Nie znaleziono żadnej trasy dla podanych adresów.");
				else if(status != google.maps.DirectionsStatus.OK)
					alert("Błąd wyznaczania trasy. Status: " + status) //obsługa błędu
				else //Status is OK
				{
					var route = response.routes[0];
					var routePolyline = new google.maps.Polyline({ path: google.maps.geometry.encoding.decodePath(route.overview_polyline) });
					directionsRenderer.setDirections(response);
					//numberOfRechargesCallback(route.legs[0].distance.text, route, choosedCar.maximumDistance);

					//Filter stations to near-route stations
					var chargingStationsNearRoute = new Array();
					chargingStations.forEach(station => {
						var stationCoordinates = new google.maps.LatLng(station.latitude, station.longitude);
						if(google.maps.geometry.poly.isLocationOnEdge(stationCoordinates, routePolyline, 0.1))
							chargingStationsNearRoute.push(station);
					});

					if(chargingStationsNearRoute.length == 0)
						window.alert("Brak ładowarek elektrycznych w pobliżu wyznaczonej trasy!");
					else
					{
						//Set charging stations as markers with info
						chargingStationsNearRoute.forEach(station => {
							var stationState = "Aktywna";
							if(station.stationState == 0) {
								stationState = "Zamknięta";
							}

							//Check if station has same connector as car - then, if yes show marker as green, otherwise show as yellow
							var stationHasCorrectConnector = false;
							station.chargingPoints.forEach(chargingPoint => {
								choosedCar.connectors.forEach(carConnector => {
									if(chargingPoint.connector.name == carConnector.name) {
										stationHasCorrectConnector = true;
									}
								});
							});
							
							var marker = new google.maps.Marker({
								position: { lat: station.latitude, lng: station.longitude },
								map: map,
							});
							if(stationHasCorrectConnector)
								marker.setIcon('http://maps.google.com/mapfiles/ms/icons/green-dot.png');
							else
								marker.setIcon('http://maps.google.com/mapfiles/ms/icons/yellow-dot.png');
							markersArray.push(marker);

							//Create of marker's information window and attach click listener
							var markerDetails = new google.maps.markerDetails({
								content: "<p>Stacja: " + station.name + "<br>Koordynaty: " + station.latitude + ", " 
								+ station.longitude + "<br>Adres: " + station.city + " " + station.postalAdress + ", "
								+ station.street + "<br>Godziny otwarcia: " + station.openHours + "<br>Właściciel: "
								+ station.owner + "<br>Stan stacji: " + stationState + "<br><a href='https://www.google.pl/maps?q=" + station.latitude + ",+" + station.longitude + "'>Otwórz w google maps</a></p>",
							});
							google.maps.event.addListener(marker, "click", () => {
								markerDetails.open(map,marker);
							});
						});
					}
				}
			});
		}
	} //End of calcRoute function

	//Handling google api responses other than 'OK', while getting coordinates from address
	function statusErrorHandler(status, address) {
		switch(status) {
			case("ZERO_RESULTS"):
				alert("Can't find any results for address \"" + address + "\"");
				break;
			case("INVALID_REQUEST"):
				alert("Invalid request - probably query is missing for address \"" + address + "\"");
				break;
			case("GOOGLEAPI_ERROR"):
				alert("Problem while parsing result from google api has occured for address \"" + address + "\"");
				break;
			case("WRONG_KEY"):
				alert("Wrong geocode api key.");
			default:
				alert("Unknown error has occured for \"" + address + "\" ");
				break;
		}
	}

	async function numberOfRechargesCallback(distance, route, carMaximumDistance) {
		var carBatteryLevel = document.getElementById("batteryLevelSelect").value;
		numberOfRecharges = await fetchNumberOfRecharges(distance, carMaximumDistance, carBatteryLevel);
	}

	//Converting address to coordinates, using GeoController (getCoordinates), ultimately using google api
	async function fetchAddress(address) {
		try {
			const response = await fetch(window.location.href + "geo/getCoordinates?key=" + "@geoKey" + "&address=" + address);
			const geoArray = await response.json();
			if(geoArray["Status"] == "OK")
				return new google.maps.LatLng(parseFloat(geoArray["Coordinates"]["Lat"]),parseFloat(geoArray["Coordinates"]["Lng"]));
			else
				statusErrorHandler(geoArray["Status"], address);
		} catch(error) {
			console.error(error);
		}
	}

	//Get number of car recharges for currrent route from api controller (DistanceController | getNumberOfRecharges)
	async function fetchNumberOfRecharges(distance, maxDistance, batteryLevel) {
		try {
			const response = await fetch(window.location.href + "distance/getNumberOfRecharges?routeDistance=" + distance + "&maxDistance=" + maxDistance + "&batteryLevel=" + batteryLevel);
			const numberOfRecharges = await response.json();
			return numberOfRecharges;
		} catch(error) {
			console.error(error);
		}
	}

	//Get real distance from api controller (DistanceController | getRealDistance)
	async function fetchRealDistance(maxDistance, batteryLevel) {
		try {
			const response = await fetch(window.location.href + "distance/getRealDistance?maximumDistance=" + maxDistance + "&batteryLevel=" + batteryLevel);
			const realDistance = await response.json();
			return realDistance;
		} catch(error) {
			console.error(error);
		}
	}

	//Clear charging station markers from map
	function clearMarkers() {
		markersArray.forEach(marker => {
			marker.setMap(null);
		});
		markersArray.length = 0;
	}

</script>

<script type="text/javascript">
	var element = document.getElementById("origin");
	document.getElementById("currentLocationButton").addEventListener("click", function(){ var coords = getCurrentLocation(); element.value = coords[0]; });


	function getCurrentLocation() {
		if(navigator.geolocation) {
			navigator.geolocation.getCurrentPosition(useLocation);
		}
	}

	function useLocation(position) {
		url = window.location.href + "geo/getAddress?key=" + "@geoKey" + "&longitude=" + position.coords.longitude + "&latitude=" + position.coords.latitude;
		fetch(url)
		.then(res => res.json())
		.then(data => {
			if(data["Status"] == "OK")
				element.value = data["Address"];
			else
				alert("Problem with getting current localization has occured. Please type address manually.");
		});
	}

</script>

